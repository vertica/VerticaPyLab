#!/bin/bash
# Copyright 2023 Open Text

# this script tries to run the command you typed on the command line into the
# docker environment seamlessly.  It works by checking the name it was
# executed as, so a symbolic link "vsql" will run vsql.

# Find the config file
VERTICA_DEMO_PREFIX=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
VERTICA_DEMO_PREFIX=${VERTICA_DEMO_PREFIX%/bin}
CONFIG_FILE=$VERTICA_DEMO_PREFIX/etc/vertica-demo.conf
if ! [[ -r $CONFIG_FILE ]]; then
  if ! make -C $VERTICA_DEMO_PREFIX etc/vertica-demo.conf || ! [[ -r $CONFIG_FILE ]]; then
    echo "Cannot find config file ($CONFIG_FILE)" >&2
    exit 1
  fi
fi
# Load the configuration
source $CONFIG_FILE || abort $? "Cannot load config file $CONFIG_FILE"

: ${EXECNAME:=${BASH_SOURCE[0]##*/}}
# Special cases for certain executables
case "$EXECNAME" in
  ( admintools ) :
      # always run admintools as dbadmin
      USERID=dbadmin
    ;;
esac

# always forward VSQL_*, but allow for other enviornment variables to be
# specified in VERTICA_ENV_FORWARDING
for var in ${!VSQL_*} $VERTICA_ENV_FORWARD; do
  if [[ ${!var+isset} ]]; then
    VERTICA_ENV+=(-e "$var=${!var}")
  fi
done

# The OSx version of bash calls the M1 chip "arm64", but if someone updates
# /bin/bash, then it will could use "aarch64" in $MACHTYPE
if [[ $MACHTYPE =~ ^aarch64 ]] || [[ $MACHTYPE =~ ^arm64 ]] ; then
  # Arm based macs crash on a memory check unless this is added
  VERTICA_ENV+=(-e VERTICA_MEMDEBUG=2)
fi

: ${USERID:=$(docker exec -i "${VERTICA_ENV[@]}" $VERTICA_CONTAINER_NAME stat -c "%u:%g" "$HOME")}
DOCKER_EXECARGS+=( -u "$USERID" )

test -t 0 && DOCKER_EXECARGS+=( -t )

# does the current directory exist in the container?
if docker exec -i "${DOCKER_EXECARGS[@]}" "${VERTICA_ENV[@]}" $VERTICA_CONTAINER_NAME test -d "$PWD"; then
  # does this version of docker support starting in a particular directory?
  if docker exec --help | grep workdir >/dev/null ; then
    DOCKER_EXECARGS+=( --workdir $PWD )
  else
    # some hackery to chdir
    set -- -c "cd $PWD; exec "'"$@"' "$EXECNAME" "$EXECNAME" "$@"
    EXECNAME=bash
  fi
fi

docker exec -i "${DOCKER_EXECARGS[@]}" "${VERTICA_ENV[@]}" $VERTICA_CONTAINER_NAME $EXECNAME "$@"
