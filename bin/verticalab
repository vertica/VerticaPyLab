#!/bin/bash
# Copyright 2023 Open Text

# this script sets up a docker container with an ML development environment

# Find the config file
VERTICA_DEMO_PREFIX=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
VERTICA_DEMO_PREFIX=${VERTICA_DEMO_PREFIX%/bin}
CONFIG_FILE=$VERTICA_DEMO_PREFIX/etc/vertica-demo.conf
WORKSPACE=$VERTICA_DEMO_PREFIX/project
WORKSPACE_ENABLEMENT=$VERTICA_DEMO_PREFIX/docker-verticapy/enablement
if ! [[ -r $CONFIG_FILE ]]; then
  if ! make -C $VERTICA_DEMO_PREFIX etc/vertica-demo.conf || ! [[ -r $CONFIG_FILE ]]; then
    echo "Cannot find config file ($CONFIG_FILE)" >&2
    exit 1
  fi
fi
# Load the configuration
source $CONFIG_FILE || abort $? "Cannot load config file $CONFIG_FILE"

function usage {
    echo "usage: $0 [-h] [-c <container>][-i <image>] [-p <port>]"
    echo
    echo "Options:"
    echo "  -i <image> The name of the image to use for the demo"
    echo "  -c <container> The name you want the container to have to use (Default: verticapy-demo)"
    echo "  -p <port>  Port to use to run jupyterlab (Default: 8889)"
    echo
    exit 1
}

while getopts "p:c:i:h" opt; do
    case ${opt} in
        h)
            usage
            ;;
        i)
            VERTICALAB_IMG=$OPTARG
            ;;
        v)
            VERTICALAB_IMG_VERSION=$OPTARG
            ;;
        p)
            VERTICALAB_PORT=$OPTARG
            ;;
        c)
            VERTICALAB_CONTAINER_NAME=$OPTARG
            ;;
        \?)
            echo "Unknown option: -${opt}"
            usage
            ;;
    esac
done

VERTICALAB_RUNARGS+=( -v $WORKSPACE:/project )
VERTICALAB_RUNARGS+=( -v $WORKSPACE_ENABLEMENT:/project/demos/enablement:ro )

if [[ -n $DOCKER_HOST ]] && [[ $VERTICALAB_BIND_ADDRESS == 127.0.0.1 ]]; then
  # Try to support docker-machine networking
  VERTICALAB_BIND_ADDRESS=${DOCKER_HOST##tcp://}
  VERTICALAB_BIND_ADDRESS=${VERTICALAB_BIND_ADDRESS%%:*}
fi

if [[ $VERTICALAB_PORT =~ ^[0-9]*$ ]] ; then
  VERTICALAB_RUNARGS+=( -p $VERTICALAB_BIND_ADDRESS:$VERTICALAB_PORT:8888 )
else
  echo "Warning: VERTICALAB_PORT must be numeric.  Using a random port." >&2
  VERTICALAB_RUNARGS+=( --expose 8888 -P )
fi
VERTICALAB_RUNARGS+=( --hostname "$VERTICALAB_CONTAINER_NAME" )
VERTICALAB_RUNARGS+=( --name "$VERTICALAB_CONTAINER_NAME" )
VERTICALAB_RUNARGS+=( --rm )

# Use a network just for this demo
docker network create "$DOCKER_NETWORK" 2>/dev/null
VERTICALAB_RUNARGS+=( --network "$DOCKER_NETWORK" )

docker run --detach "${VERTICALAB_RUNARGS[@]}" "vertica/$VERTICALAB_IMG:$VERTICALAB_IMG_VERSION" || exit $?

VERTICALAB_PORT=$(docker port "$VERTICALAB_CONTAINER_NAME" 8888/tcp)
VERTICALAB_PORT=${VERTICALAB_PORT##*:}

# if vertica-demo is running
if docker exec -i "$VERTICA_CONTAINER_NAME" true 2>/dev/null; then
  # copy dbadmin@vertica-demo credentials to root@verticapy-demo to enable ssh
  docker exec -i "$VERTICA_CONTAINER_NAME" bash -c "cd; tar -zcf - .ssh" | docker exec -i "$VERTICALAB_CONTAINER_NAME" bash -c "cd; tar -zxf -"
fi

# if we can get the ip address of the vertica-demo, then add a hosts entry
if HOSTS_ADD=$(docker network inspect -f '{{range .Containers}}{{if (ne .Name "'"$VERTICALAB_CONTAINER_NAME"'")}}{{index (split .IPv4Address "/") 0}}        {{.Name}}{{println}}{{end}}{{end}}' "$DOCKER_NETWORK"); then 
  HOSTS_START=$(docker exec -i "$VERTICALAB_CONTAINER_NAME" grep -v vertica-demo /etc/hosts)
  if [[ $VERTICA_CONTAINER_NAME != vertica-demo ]] ; then
    # so vertica-demo works no matter what you call your demo container
    HOSTS_ADD=$(echo "$HOSTS_ADD" | sed "s/$VERTICA_CONTAINER_NAME/$VERTICA_CONTAINER_NAME vertica-demo/")
    SSH_CONFIG_EXTRA_HOSTNAME="vertica-demo"
  fi
  # add docker containers and host ip address to /etc/hosts
  printf "%s\n" "$HOSTS_START" "$HOSTS_ADD" | docker exec -i "$VERTICALAB_CONTAINER_NAME" tee /etc/hosts > /dev/null
else
  echo "Warning: Cannot determine ip address of vertica-demo container" >&2
fi

# write a .ssh/config
# tweak some settings to disable the fingerprint warnings
echo "# ssh config generated by verticalab script
Host *
    GlobalKnownHostsFile=/dev/nulls
    UserKnownHostsFile=/dev/null
    UpdateHostKeys=no
    StrictHostKeyChecking=no
    LogLevel=error
    RequestTTY=yes

Host $VERTICA_HOST_NAME $SSH_CONFIG_EXTRA_HOSTNAME
    User dbadmin
" | docker exec -i "$VERTICALAB_CONTAINER_NAME" bash -c 'umask 077; mkdir -p $HOME/.ssh; cat >> $HOME/.ssh/config'

echo "Starting..."
# sleep some time to wait for jupyterlab logs
timeout=10 #seconds
while ! docker logs -n 5 "$VERTICALAB_CONTAINER_NAME" 2>&1 | grep 'Or copy and paste one of these URLs:' >/dev/null && ((timeout--)); do
  sleep 1
done

# Get the basic URL and remap the hostname and port
if  [[ $VERTICALAB_BIND_ADDRESS == 0.0.0.0 ]]; then
  url_host=$(hostname -f)
else
  url_host="$VERTICALAB_BIND_ADDRESS"
fi
URL=$(docker logs -n 5 "$VERTICALAB_CONTAINER_NAME" 2>&1 | grep -Eo 'http[s]?://[0-9.]+:8888/.*' | sed "s/[0-9.]*:8888/$url_host:$VERTICALAB_PORT/")
# This checks the kernel name to set the correct command to open the link in browser,
# because Linux systems will use xdg-open while MacOs will use open
if [[ $OSTYPE == darwin* ]]; then # OSX uses different args for stat
  OPEN_CMD=open
elif [[ $(uname -r) =~ WSL ]]; then
  OPEN_CMD="powershell.exe /c start"
else
  OPEN_CMD=xdg-open
fi
# Open the correct url in browser. We know that the correct url is the second one.
# So even if in some cases a 3rd one is created this will not be affected
echo
echo "Waiting for url to open in browser..."
$OPEN_CMD "$URL" 2> /dev/null
if [[ $? -eq 0 ]]; then
  echo
  echo "If the link does not open or does not work, copy and paste this URL in browser:"
else
  echo
  echo "Copy and paste this URL in browser:"
fi
echo "    $URL"
